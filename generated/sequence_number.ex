defmodule StellarBase.XDR.SequenceNumber do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SequenceNumber` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Int64

  @type t :: %__MODULE__{sequence_number: Int64.t()}

  defstruct [:sequence_number]

  @spec new(sequence_number :: Int64.t()) :: t()
  def new(%Int64{} = sequence_number), do: %__MODULE__{sequence_number: sequence_number}

  @impl true
  def encode_xdr(%__MODULE__{sequence_number: sequence_number}) do
    Int64.encode_xdr(sequence_number)
  end

  @impl true
  def encode_xdr!(%__MODULE__{sequence_number: sequence_number}) do
    Int64.encode_xdr!(sequence_number)
  end

  @impl true
  def decode_xdr(bytes, term \\ nil)

  def decode_xdr(bytes, _term) do
    case Int64.decode_xdr(bytes) do
      {:ok, {%Int64{} = sequence_number, rest}} -> {:ok, {new(sequence_number), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, term \\ nil)

  def decode_xdr!(bytes, _term) do
    {%Int64{} = sequence_number, rest} = Int64.decode_xdr!(bytes)
    {new(sequence_number), rest}
  end
end
