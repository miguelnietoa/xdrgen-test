defmodule StellarBase.XDR.CreateContractArgs do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `CreateContractArgs` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ContractIDPreimage,
    ContractExecutable
  }

  @struct_spec XDR.Struct.new(
    contract_id_preimage: ContractIDPreimage,
    executable: ContractExecutable
  )

  @type contract_id_preimage_type :: ContractIDPreimage.t()
  @type executable_type :: ContractExecutable.t()

  @type t :: %__MODULE__{contract_id_preimage: contract_id_preimage_type(), executable: executable_type()}

  defstruct [:contract_id_preimage, :executable]

  @spec new(contract_id_preimage :: contract_id_preimage_type(), executable :: executable_type()) :: t()
  def new(
    %ContractIDPreimage{} = contract_id_preimage,
    %ContractExecutable{} = executable
  ),
  do: %__MODULE__{contract_id_preimage: contract_id_preimage, executable: executable}

  @impl true
  def encode_xdr(%__MODULE__{contract_id_preimage: contract_id_preimage, executable: executable}) do
    [contract_id_preimage: contract_id_preimage, executable: executable]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{contract_id_preimage: contract_id_preimage, executable: executable}) do
    [contract_id_preimage: contract_id_preimage, executable: executable]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [contract_id_preimage: contract_id_preimage, executable: executable]}, rest}} ->
        {:ok, {new(contract_id_preimage, executable), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [contract_id_preimage: contract_id_preimage, executable: executable]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(contract_id_preimage, executable), rest}
  end
end
