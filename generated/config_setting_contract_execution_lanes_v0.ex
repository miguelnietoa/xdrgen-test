defmodule StellarBase.XDR.ConfigSettingContractExecutionLanesV0 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigSettingContractExecutionLanesV0` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint32
  }

  @struct_spec XDR.Struct.new(
    ledger_max_tx_count: Uint32
  )

  @type ledger_max_tx_count_type :: Uint32.t()

  @type t :: %__MODULE__{ledger_max_tx_count: ledger_max_tx_count_type()}

  defstruct [:ledger_max_tx_count]

  @spec new(ledger_max_tx_count :: ledger_max_tx_count_type()) :: t()
  def new(
    %Uint32{} = ledger_max_tx_count
  ),
  do: %__MODULE__{ledger_max_tx_count: ledger_max_tx_count}

  @impl true
  def encode_xdr(%__MODULE__{ledger_max_tx_count: ledger_max_tx_count}) do
    [ledger_max_tx_count: ledger_max_tx_count]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{ledger_max_tx_count: ledger_max_tx_count}) do
    [ledger_max_tx_count: ledger_max_tx_count]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [ledger_max_tx_count: ledger_max_tx_count]}, rest}} ->
        {:ok, {new(ledger_max_tx_count), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [ledger_max_tx_count: ledger_max_tx_count]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(ledger_max_tx_count), rest}
  end
end
