defmodule StellarBase.XDR.LedgerCloseValueSignature do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `LedgerCloseValueSignature` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    NodeID,
    Signature
  }

  @struct_spec XDR.Struct.new(
    node_id: NodeID,
    signature: Signature
  )

  @type node_id_type :: NodeID.t()
  @type signature_type :: Signature.t()

  @type t :: %__MODULE__{node_id: node_id_type(), signature: signature_type()}

  defstruct [:node_id, :signature]

  @spec new(node_id :: node_id_type(), signature :: signature_type()) :: t()
  def new(
    %NodeID{} = node_id,
    %Signature{} = signature
  ),
  do: %__MODULE__{node_id: node_id, signature: signature}

  @impl true
  def encode_xdr(%__MODULE__{node_id: node_id, signature: signature}) do
    [node_id: node_id, signature: signature]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{node_id: node_id, signature: signature}) do
    [node_id: node_id, signature: signature]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [node_id: node_id, signature: signature]}, rest}} ->
        {:ok, {new(node_id, signature), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [node_id: node_id, signature: signature]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(node_id, signature), rest}
  end
end
