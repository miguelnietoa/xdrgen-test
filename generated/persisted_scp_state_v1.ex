defmodule StellarBase.XDR.PersistedSCPStateV1 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `PersistedSCPStateV1` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    SCPEnvelopeList,
    SCPQuorumSetList
  }

  @struct_spec XDR.Struct.new(
    scp_envelopes: SCPEnvelopeList,
    quorum_sets: SCPQuorumSetList
  )

  @type scp_envelopes_type :: SCPEnvelopeList.t()
  @type quorum_sets_type :: SCPQuorumSetList.t()

  @type t :: %__MODULE__{scp_envelopes: scp_envelopes_type(), quorum_sets: quorum_sets_type()}

  defstruct [:scp_envelopes, :quorum_sets]

  @spec new(scp_envelopes :: scp_envelopes_type(), quorum_sets :: quorum_sets_type()) :: t()
  def new(
    %SCPEnvelopeList{} = scp_envelopes,
    %SCPQuorumSetList{} = quorum_sets
  ),
  do: %__MODULE__{scp_envelopes: scp_envelopes, quorum_sets: quorum_sets}

  @impl true
  def encode_xdr(%__MODULE__{scp_envelopes: scp_envelopes, quorum_sets: quorum_sets}) do
    [scp_envelopes: scp_envelopes, quorum_sets: quorum_sets]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{scp_envelopes: scp_envelopes, quorum_sets: quorum_sets}) do
    [scp_envelopes: scp_envelopes, quorum_sets: quorum_sets]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [scp_envelopes: scp_envelopes, quorum_sets: quorum_sets]}, rest}} ->
        {:ok, {new(scp_envelopes, quorum_sets), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [scp_envelopes: scp_envelopes, quorum_sets: quorum_sets]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(scp_envelopes, quorum_sets), rest}
  end
end
