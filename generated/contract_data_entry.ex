defmodule StellarBase.XDR.ContractDataEntry do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ContractDataEntry` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ExtensionPoint,
    SCAddress,
    SCVal,
    ContractDataDurability
  }

  @struct_spec XDR.Struct.new(
    ext: ExtensionPoint,
    contract: SCAddress,
    key: SCVal,
    durability: ContractDataDurability,
    val: SCVal
  )

  @type ext_type :: ExtensionPoint.t()
  @type contract_type :: SCAddress.t()
  @type key_type :: SCVal.t()
  @type durability_type :: ContractDataDurability.t()
  @type val_type :: SCVal.t()

  @type t :: %__MODULE__{ext: ext_type(), contract: contract_type(), key: key_type(), durability: durability_type(), val: val_type()}

  defstruct [:ext, :contract, :key, :durability, :val]

  @spec new(ext :: ext_type(), contract :: contract_type(), key :: key_type(), durability :: durability_type(), val :: val_type()) :: t()
  def new(
    %ExtensionPoint{} = ext,
    %SCAddress{} = contract,
    %SCVal{} = key,
    %ContractDataDurability{} = durability,
    %SCVal{} = val
  ),
  do: %__MODULE__{ext: ext, contract: contract, key: key, durability: durability, val: val}

  @impl true
  def encode_xdr(%__MODULE__{ext: ext, contract: contract, key: key, durability: durability, val: val}) do
    [ext: ext, contract: contract, key: key, durability: durability, val: val]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{ext: ext, contract: contract, key: key, durability: durability, val: val}) do
    [ext: ext, contract: contract, key: key, durability: durability, val: val]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [ext: ext, contract: contract, key: key, durability: durability, val: val]}, rest}} ->
        {:ok, {new(ext, contract, key, durability, val), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [ext: ext, contract: contract, key: key, durability: durability, val: val]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(ext, contract, key, durability, val), rest}
  end
end
