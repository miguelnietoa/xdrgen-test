defmodule StellarBase.XDR.ContractCostType do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ContractCostType` type.
  """

  @behaviour XDR.Declaration

  @declarations [
    WasmInsnExec: 0,
    WasmMemAlloc: 1,
    HostMemAlloc: 2,
    HostMemCpy: 3,
    HostMemCmp: 4,
    DispatchHostFunction: 5,
    VisitObject: 6,
    ValSer: 7,
    ValDeser: 8,
    ComputeSha256Hash: 9,
    ComputeEd25519PubKey: 10,
    MapEntry: 11,
    VecEntry: 12,
    VerifyEd25519Sig: 13,
    VmMemRead: 14,
    VmMemWrite: 15,
    VmInstantiation: 16,
    VmCachedInstantiation: 17,
    InvokeVmFunction: 18,
    ComputeKeccak256Hash: 19,
    ComputeEcdsaSecp256k1Key: 20,
    ComputeEcdsaSecp256k1Sig: 21,
    RecoverEcdsaSecp256k1Key: 22,
    Int256AddSub: 23,
    Int256Mul: 24,
    Int256Div: 25,
    Int256Pow: 26,
    Int256Shift: 27
  ]

  @enum_spec %XDR.Enum{declarations: @declarations, identifier: nil}

  @type t :: %__MODULE__{identifier: atom()}

  defstruct [:identifier]

  @spec new(type :: atom()) :: t()
  def new(type \\ :WasmInsnExec), do: %__MODULE__{identifier: type}

  @impl true
  def encode_xdr(%__MODULE__{identifier: type}) do
    @declarations
    |> XDR.Enum.new(type)
    |> XDR.Enum.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{identifier: type}) do
    @declarations
    |> XDR.Enum.new(type)
    |> XDR.Enum.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, spec \\ @enum_spec)

  def decode_xdr(bytes, spec) do
    case XDR.Enum.decode_xdr(bytes, spec) do
      {:ok, {%XDR.Enum{identifier: type}, rest}} -> {:ok, {new(type), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, spec \\ @enum_spec)

  def decode_xdr!(bytes, spec) do
    {%XDR.Enum{identifier: type}, rest} = XDR.Enum.decode_xdr!(bytes, spec)
    {new(type), rest}
  end
end
