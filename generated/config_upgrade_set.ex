defmodule StellarBase.XDR.ConfigUpgradeSet do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigUpgradeSet` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ConfigSettingEntryList
  }

  @struct_spec XDR.Struct.new(
    updated_entry: ConfigSettingEntryList
  )

  @type updated_entry_type :: ConfigSettingEntryList.t()

  @type t :: %__MODULE__{updated_entry: updated_entry_type()}

  defstruct [:updated_entry]

  @spec new(updated_entry :: updated_entry_type()) :: t()
  def new(
    %ConfigSettingEntryList{} = updated_entry
  ),
  do: %__MODULE__{updated_entry: updated_entry}

  @impl true
  def encode_xdr(%__MODULE__{updated_entry: updated_entry}) do
    [updated_entry: updated_entry]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{updated_entry: updated_entry}) do
    [updated_entry: updated_entry]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [updated_entry: updated_entry]}, rest}} ->
        {:ok, {new(updated_entry), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [updated_entry: updated_entry]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(updated_entry), rest}
  end
end
