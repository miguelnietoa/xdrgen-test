defmodule StellarBase.XDR.SetOptionsResultCode do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SetOptionsResultCode` type.
  """

  @behaviour XDR.Declaration

  @declarations [
    SET_OPTIONS_SUCCESS: 0,
    SET_OPTIONS_LOW_RESERVE: -1,
    SET_OPTIONS_TOO_MANY_SIGNERS: -2,
    SET_OPTIONS_BAD_FLAGS: -3,
    SET_OPTIONS_INVALID_INFLATION: -4,
    SET_OPTIONS_CANT_CHANGE: -5,
    SET_OPTIONS_UNKNOWN_FLAG: -6,
    SET_OPTIONS_THRESHOLD_OUT_OF_RANGE: -7,
    SET_OPTIONS_BAD_SIGNER: -8,
    SET_OPTIONS_INVALID_HOME_DOMAIN: -9,
    SET_OPTIONS_AUTH_REVOCABLE_REQUIRED: -10
  ]

  @enum_spec %XDR.Enum{declarations: @declarations, identifier: nil}

  @type t :: %__MODULE__{identifier: atom()}

  defstruct [:identifier]

  @spec new(type :: atom()) :: t()
  def new(type \\ :SET_OPTIONS_SUCCESS), do: %__MODULE__{identifier: type}

  @impl true
  def encode_xdr(%__MODULE__{identifier: type}) do
    @declarations
    |> XDR.Enum.new(type)
    |> XDR.Enum.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{identifier: type}) do
    @declarations
    |> XDR.Enum.new(type)
    |> XDR.Enum.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, spec \\ @enum_spec)

  def decode_xdr(bytes, spec) do
    case XDR.Enum.decode_xdr(bytes, spec) do
      {:ok, {%XDR.Enum{identifier: type}, rest}} -> {:ok, {new(type), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, spec \\ @enum_spec)

  def decode_xdr!(bytes, spec) do
    {%XDR.Enum{identifier: type}, rest} = XDR.Enum.decode_xdr!(bytes, spec)
    {new(type), rest}
  end
end
