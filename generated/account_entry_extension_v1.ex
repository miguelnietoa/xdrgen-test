defmodule StellarBase.XDR.AccountEntryExtensionV1 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `AccountEntryExtensionV1` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Liabilities,
    AccountEntryExtensionV1Ext
  }

  @struct_spec XDR.Struct.new(
    liabilities: Liabilities,
    ext: AccountEntryExtensionV1Ext
  )

  @type liabilities_type :: Liabilities.t()
  @type ext_type :: AccountEntryExtensionV1Ext.t()

  @type t :: %__MODULE__{liabilities: liabilities_type(), ext: ext_type()}

  defstruct [:liabilities, :ext]

  @spec new(liabilities :: liabilities_type(), ext :: ext_type()) :: t()
  def new(
    %Liabilities{} = liabilities,
    %AccountEntryExtensionV1Ext{} = ext
  ),
  do: %__MODULE__{liabilities: liabilities, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{liabilities: liabilities, ext: ext}) do
    [liabilities: liabilities, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{liabilities: liabilities, ext: ext}) do
    [liabilities: liabilities, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [liabilities: liabilities, ext: ext]}, rest}} ->
        {:ok, {new(liabilities, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [liabilities: liabilities, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(liabilities, ext), rest}
  end
end
