defmodule StellarBase.XDR.Operation do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `Operation` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    OptionalMuxedAccount,
    OperationBody
  }

  @struct_spec XDR.Struct.new(
    source_account: OptionalMuxedAccount,
    body: OperationBody
  )

  @type source_account_type :: OptionalMuxedAccount.t()
  @type body_type :: OperationBody.t()

  @type t :: %__MODULE__{source_account: source_account_type(), body: body_type()}

  defstruct [:source_account, :body]

  @spec new(source_account :: source_account_type(), body :: body_type()) :: t()
  def new(
    %OptionalMuxedAccount{} = source_account,
    %OperationBody{} = body
  ),
  do: %__MODULE__{source_account: source_account, body: body}

  @impl true
  def encode_xdr(%__MODULE__{source_account: source_account, body: body}) do
    [source_account: source_account, body: body]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{source_account: source_account, body: body}) do
    [source_account: source_account, body: body]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [source_account: source_account, body: body]}, rest}} ->
        {:ok, {new(source_account, body), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [source_account: source_account, body: body]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(source_account, body), rest}
  end
end
