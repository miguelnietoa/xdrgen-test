defmodule StellarBase.XDR.SCPStatement do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SCPStatement` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    NodeID,
    Uint64,
    SCPStatementPledges
  }

  @struct_spec XDR.Struct.new(
    node_id: NodeID,
    slot_index: Uint64,
    pledges: SCPStatementPledges
  )

  @type node_id_type :: NodeID.t()
  @type slot_index_type :: Uint64.t()
  @type pledges_type :: SCPStatementPledges.t()

  @type t :: %__MODULE__{node_id: node_id_type(), slot_index: slot_index_type(), pledges: pledges_type()}

  defstruct [:node_id, :slot_index, :pledges]

  @spec new(node_id :: node_id_type(), slot_index :: slot_index_type(), pledges :: pledges_type()) :: t()
  def new(
    %NodeID{} = node_id,
    %Uint64{} = slot_index,
    %SCPStatementPledges{} = pledges
  ),
  do: %__MODULE__{node_id: node_id, slot_index: slot_index, pledges: pledges}

  @impl true
  def encode_xdr(%__MODULE__{node_id: node_id, slot_index: slot_index, pledges: pledges}) do
    [node_id: node_id, slot_index: slot_index, pledges: pledges]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{node_id: node_id, slot_index: slot_index, pledges: pledges}) do
    [node_id: node_id, slot_index: slot_index, pledges: pledges]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [node_id: node_id, slot_index: slot_index, pledges: pledges]}, rest}} ->
        {:ok, {new(node_id, slot_index, pledges), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [node_id: node_id, slot_index: slot_index, pledges: pledges]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(node_id, slot_index, pledges), rest}
  end
end
