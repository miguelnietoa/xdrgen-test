defmodule StellarBase.XDR.AccountEntryExtensionV2 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `AccountEntryExtensionV2` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint32,
    SponsorshipDescriptorList20,
    AccountEntryExtensionV2Ext
  }

  @struct_spec XDR.Struct.new(
    num_sponsored: Uint32,
    num_sponsoring: Uint32,
    signer_sponsoring_i_ds: SponsorshipDescriptorList20,
    ext: AccountEntryExtensionV2Ext
  )

  @type num_sponsored_type :: Uint32.t()
  @type num_sponsoring_type :: Uint32.t()
  @type signer_sponsoring_i_ds_type :: SponsorshipDescriptorList20.t()
  @type ext_type :: AccountEntryExtensionV2Ext.t()

  @type t :: %__MODULE__{num_sponsored: num_sponsored_type(), num_sponsoring: num_sponsoring_type(), signer_sponsoring_i_ds: signer_sponsoring_i_ds_type(), ext: ext_type()}

  defstruct [:num_sponsored, :num_sponsoring, :signer_sponsoring_i_ds, :ext]

  @spec new(num_sponsored :: num_sponsored_type(), num_sponsoring :: num_sponsoring_type(), signer_sponsoring_i_ds :: signer_sponsoring_i_ds_type(), ext :: ext_type()) :: t()
  def new(
    %Uint32{} = num_sponsored,
    %Uint32{} = num_sponsoring,
    %SponsorshipDescriptorList20{} = signer_sponsoring_i_ds,
    %AccountEntryExtensionV2Ext{} = ext
  ),
  do: %__MODULE__{num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext}) do
    [num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext}) do
    [num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext]}, rest}} ->
        {:ok, {new(num_sponsored, num_sponsoring, signer_sponsoring_i_ds, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [num_sponsored: num_sponsored, num_sponsoring: num_sponsoring, signer_sponsoring_i_ds: signer_sponsoring_i_ds, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(num_sponsored, num_sponsoring, signer_sponsoring_i_ds, ext), rest}
  end
end
