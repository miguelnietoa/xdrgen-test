defmodule StellarBase.XDR.ConfigUpgradeSetKey do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ConfigUpgradeSetKey` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Hash
  }

  @struct_spec XDR.Struct.new(
    contract_id: Hash,
    content_hash: Hash
  )

  @type contract_id_type :: Hash.t()
  @type content_hash_type :: Hash.t()

  @type t :: %__MODULE__{contract_id: contract_id_type(), content_hash: content_hash_type()}

  defstruct [:contract_id, :content_hash]

  @spec new(contract_id :: contract_id_type(), content_hash :: content_hash_type()) :: t()
  def new(
    %Hash{} = contract_id,
    %Hash{} = content_hash
  ),
  do: %__MODULE__{contract_id: contract_id, content_hash: content_hash}

  @impl true
  def encode_xdr(%__MODULE__{contract_id: contract_id, content_hash: content_hash}) do
    [contract_id: contract_id, content_hash: content_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{contract_id: contract_id, content_hash: content_hash}) do
    [contract_id: contract_id, content_hash: content_hash]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [contract_id: contract_id, content_hash: content_hash]}, rest}} ->
        {:ok, {new(contract_id, content_hash), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [contract_id: contract_id, content_hash: content_hash]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(contract_id, content_hash), rest}
  end
end
