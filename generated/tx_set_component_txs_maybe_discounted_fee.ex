defmodule StellarBase.XDR.TxSetComponentTxsMaybeDiscountedFee do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `TxSetComponentTxsMaybeDiscountedFee` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    OptionalInt64,
    TransactionEnvelopeList
  }

  @struct_spec XDR.Struct.new(
    base_fee: OptionalInt64,
    txs: TransactionEnvelopeList
  )

  @type base_fee_type :: OptionalInt64.t()
  @type txs_type :: TransactionEnvelopeList.t()

  @type t :: %__MODULE__{base_fee: base_fee_type(), txs: txs_type()}

  defstruct [:base_fee, :txs]

  @spec new(base_fee :: base_fee_type(), txs :: txs_type()) :: t()
  def new(
    %OptionalInt64{} = base_fee,
    %TransactionEnvelopeList{} = txs
  ),
  do: %__MODULE__{base_fee: base_fee, txs: txs}

  @impl true
  def encode_xdr(%__MODULE__{base_fee: base_fee, txs: txs}) do
    [base_fee: base_fee, txs: txs]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{base_fee: base_fee, txs: txs}) do
    [base_fee: base_fee, txs: txs]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [base_fee: base_fee, txs: txs]}, rest}} ->
        {:ok, {new(base_fee, txs), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [base_fee: base_fee, txs: txs]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(base_fee, txs), rest}
  end
end
