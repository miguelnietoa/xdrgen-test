defmodule StellarBase.XDR.ClaimLiquidityAtom do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ClaimLiquidityAtom` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    PoolID,
    Asset,
    Int64
  }

  @struct_spec XDR.Struct.new(
    liquidity_pool_id: PoolID,
    asset_sold: Asset,
    amount_sold: Int64,
    asset_bought: Asset,
    amount_bought: Int64
  )

  @type liquidity_pool_id_type :: PoolID.t()
  @type asset_sold_type :: Asset.t()
  @type amount_sold_type :: Int64.t()
  @type asset_bought_type :: Asset.t()
  @type amount_bought_type :: Int64.t()

  @type t :: %__MODULE__{liquidity_pool_id: liquidity_pool_id_type(), asset_sold: asset_sold_type(), amount_sold: amount_sold_type(), asset_bought: asset_bought_type(), amount_bought: amount_bought_type()}

  defstruct [:liquidity_pool_id, :asset_sold, :amount_sold, :asset_bought, :amount_bought]

  @spec new(liquidity_pool_id :: liquidity_pool_id_type(), asset_sold :: asset_sold_type(), amount_sold :: amount_sold_type(), asset_bought :: asset_bought_type(), amount_bought :: amount_bought_type()) :: t()
  def new(
    %PoolID{} = liquidity_pool_id,
    %Asset{} = asset_sold,
    %Int64{} = amount_sold,
    %Asset{} = asset_bought,
    %Int64{} = amount_bought
  ),
  do: %__MODULE__{liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought}

  @impl true
  def encode_xdr(%__MODULE__{liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought}) do
    [liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought}) do
    [liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought]}, rest}} ->
        {:ok, {new(liquidity_pool_id, asset_sold, amount_sold, asset_bought, amount_bought), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [liquidity_pool_id: liquidity_pool_id, asset_sold: asset_sold, amount_sold: amount_sold, asset_bought: asset_bought, amount_bought: amount_bought]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(liquidity_pool_id, asset_sold, amount_sold, asset_bought, amount_bought), rest}
  end
end
