defmodule StellarBase.XDR.SCContractInstance do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `SCContractInstance` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ContractExecutable,
    OptionalSCMap
  }

  @struct_spec XDR.Struct.new(
    executable: ContractExecutable,
    storage: OptionalSCMap
  )

  @type executable_type :: ContractExecutable.t()
  @type storage_type :: OptionalSCMap.t()

  @type t :: %__MODULE__{executable: executable_type(), storage: storage_type()}

  defstruct [:executable, :storage]

  @spec new(executable :: executable_type(), storage :: storage_type()) :: t()
  def new(
    %ContractExecutable{} = executable,
    %OptionalSCMap{} = storage
  ),
  do: %__MODULE__{executable: executable, storage: storage}

  @impl true
  def encode_xdr(%__MODULE__{executable: executable, storage: storage}) do
    [executable: executable, storage: storage]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{executable: executable, storage: storage}) do
    [executable: executable, storage: storage]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [executable: executable, storage: storage]}, rest}} ->
        {:ok, {new(executable, storage), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [executable: executable, storage: storage]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(executable, storage), rest}
  end
end
