defmodule StellarBase.XDR.AuthenticatedMessageV0 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `AuthenticatedMessageV0` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Uint64,
    StellarMessage,
    HmacSha256Mac
  }

  @struct_spec XDR.Struct.new(
    sequence: Uint64,
    message: StellarMessage,
    mac: HmacSha256Mac
  )

  @type sequence_type :: Uint64.t()
  @type message_type :: StellarMessage.t()
  @type mac_type :: HmacSha256Mac.t()

  @type t :: %__MODULE__{sequence: sequence_type(), message: message_type(), mac: mac_type()}

  defstruct [:sequence, :message, :mac]

  @spec new(sequence :: sequence_type(), message :: message_type(), mac :: mac_type()) :: t()
  def new(
    %Uint64{} = sequence,
    %StellarMessage{} = message,
    %HmacSha256Mac{} = mac
  ),
  do: %__MODULE__{sequence: sequence, message: message, mac: mac}

  @impl true
  def encode_xdr(%__MODULE__{sequence: sequence, message: message, mac: mac}) do
    [sequence: sequence, message: message, mac: mac]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{sequence: sequence, message: message, mac: mac}) do
    [sequence: sequence, message: message, mac: mac]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [sequence: sequence, message: message, mac: mac]}, rest}} ->
        {:ok, {new(sequence, message, mac), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [sequence: sequence, message: message, mac: mac]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(sequence, message, mac), rest}
  end
end
