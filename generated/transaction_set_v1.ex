defmodule StellarBase.XDR.TransactionSetV1 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `TransactionSetV1` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    Hash,
    TransactionPhaseList
  }

  @struct_spec XDR.Struct.new(
    previous_ledger_hash: Hash,
    phases: TransactionPhaseList
  )

  @type previous_ledger_hash_type :: Hash.t()
  @type phases_type :: TransactionPhaseList.t()

  @type t :: %__MODULE__{previous_ledger_hash: previous_ledger_hash_type(), phases: phases_type()}

  defstruct [:previous_ledger_hash, :phases]

  @spec new(previous_ledger_hash :: previous_ledger_hash_type(), phases :: phases_type()) :: t()
  def new(
    %Hash{} = previous_ledger_hash,
    %TransactionPhaseList{} = phases
  ),
  do: %__MODULE__{previous_ledger_hash: previous_ledger_hash, phases: phases}

  @impl true
  def encode_xdr(%__MODULE__{previous_ledger_hash: previous_ledger_hash, phases: phases}) do
    [previous_ledger_hash: previous_ledger_hash, phases: phases]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{previous_ledger_hash: previous_ledger_hash, phases: phases}) do
    [previous_ledger_hash: previous_ledger_hash, phases: phases]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [previous_ledger_hash: previous_ledger_hash, phases: phases]}, rest}} ->
        {:ok, {new(previous_ledger_hash, phases), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [previous_ledger_hash: previous_ledger_hash, phases: phases]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(previous_ledger_hash, phases), rest}
  end
end
