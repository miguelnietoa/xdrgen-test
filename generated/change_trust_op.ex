defmodule StellarBase.XDR.ChangeTrustOp do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ChangeTrustOp` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    ChangeTrustAsset,
    Int64
  }

  @struct_spec XDR.Struct.new(
    line: ChangeTrustAsset,
    limit: Int64
  )

  @type line_type :: ChangeTrustAsset.t()
  @type limit_type :: Int64.t()

  @type t :: %__MODULE__{line: line_type(), limit: limit_type()}

  defstruct [:line, :limit]

  @spec new(line :: line_type(), limit :: limit_type()) :: t()
  def new(
    %ChangeTrustAsset{} = line,
    %Int64{} = limit
  ),
  do: %__MODULE__{line: line, limit: limit}

  @impl true
  def encode_xdr(%__MODULE__{line: line, limit: limit}) do
    [line: line, limit: limit]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{line: line, limit: limit}) do
    [line: line, limit: limit]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [line: line, limit: limit]}, rest}} ->
        {:ok, {new(line, limit), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [line: line, limit: limit]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(line, limit), rest}
  end
end
