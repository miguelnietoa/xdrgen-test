defmodule StellarBase.XDR.OptionalInt64 do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `OptionalInt64` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.Int64

  @optional_spec XDR.Optional.new(Int64)

  @type int64 :: Int64.t() | nil

  @type t :: %__MODULE__{int64: int64()}

  defstruct [:int64]

  @spec new(int64 :: int64()) :: t()
  def new(int64 \\ nil), do: %__MODULE__{int64: int64}

  @impl true
  def encode_xdr(%__MODULE__{int64: int64}) do
    int64
    |> XDR.Optional.new()
    |> XDR.Optional.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{int64: int64}) do
    int64
    |> XDR.Optional.new()
    |> XDR.Optional.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, optional_spec \\ @optional_spec)

  def decode_xdr(bytes, optional_spec) do
    case XDR.Optional.decode_xdr(bytes, optional_spec) do
      {:ok, {%XDR.Optional{type: int64}, rest}} -> {:ok, {new(int64), rest}}
      {:ok, {nil, rest}} -> {:ok, {new(), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, optional_spec \\ @optional_spec)

  def decode_xdr!(bytes, optional_spec) do
    case XDR.Optional.decode_xdr!(bytes, optional_spec) do
      {%XDR.Optional{type: int64}, rest} -> {new(int64), rest}
      {nil, rest} -> {new(), rest}
    end
  end

end
