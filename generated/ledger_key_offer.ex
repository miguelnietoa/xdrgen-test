defmodule StellarBase.XDR.LedgerKeyOffer do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `LedgerKeyOffer` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    AccountID,
    Int64
  }

  @struct_spec XDR.Struct.new(
    seller_id: AccountID,
    offer_id: Int64
  )

  @type seller_id_type :: AccountID.t()
  @type offer_id_type :: Int64.t()

  @type t :: %__MODULE__{seller_id: seller_id_type(), offer_id: offer_id_type()}

  defstruct [:seller_id, :offer_id]

  @spec new(seller_id :: seller_id_type(), offer_id :: offer_id_type()) :: t()
  def new(
    %AccountID{} = seller_id,
    %Int64{} = offer_id
  ),
  do: %__MODULE__{seller_id: seller_id, offer_id: offer_id}

  @impl true
  def encode_xdr(%__MODULE__{seller_id: seller_id, offer_id: offer_id}) do
    [seller_id: seller_id, offer_id: offer_id]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{seller_id: seller_id, offer_id: offer_id}) do
    [seller_id: seller_id, offer_id: offer_id]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id]}, rest}} ->
        {:ok, {new(seller_id, offer_id), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(seller_id, offer_id), rest}
  end
end
