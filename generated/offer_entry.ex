defmodule StellarBase.XDR.OfferEntry do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `OfferEntry` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    AccountID,
    Int64,
    Asset,
    Price,
    Uint32,
    OfferEntryExt
  }

  @struct_spec XDR.Struct.new(
    seller_id: AccountID,
    offer_id: Int64,
    selling: Asset,
    buying: Asset,
    amount: Int64,
    price: Price,
    flags: Uint32,
    ext: OfferEntryExt
  )

  @type seller_id_type :: AccountID.t()
  @type offer_id_type :: Int64.t()
  @type selling_type :: Asset.t()
  @type buying_type :: Asset.t()
  @type amount_type :: Int64.t()
  @type price_type :: Price.t()
  @type flags_type :: Uint32.t()
  @type ext_type :: OfferEntryExt.t()

  @type t :: %__MODULE__{seller_id: seller_id_type(), offer_id: offer_id_type(), selling: selling_type(), buying: buying_type(), amount: amount_type(), price: price_type(), flags: flags_type(), ext: ext_type()}

  defstruct [:seller_id, :offer_id, :selling, :buying, :amount, :price, :flags, :ext]

  @spec new(seller_id :: seller_id_type(), offer_id :: offer_id_type(), selling :: selling_type(), buying :: buying_type(), amount :: amount_type(), price :: price_type(), flags :: flags_type(), ext :: ext_type()) :: t()
  def new(
    %AccountID{} = seller_id,
    %Int64{} = offer_id,
    %Asset{} = selling,
    %Asset{} = buying,
    %Int64{} = amount,
    %Price{} = price,
    %Uint32{} = flags,
    %OfferEntryExt{} = ext
  ),
  do: %__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}

  @impl true
  def encode_xdr(%__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}) do
    [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext}) do
    [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]}, rest}} ->
        {:ok, {new(seller_id, offer_id, selling, buying, amount, price, flags, ext), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [seller_id: seller_id, offer_id: offer_id, selling: selling, buying: buying, amount: amount, price: price, flags: flags, ext: ext]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(seller_id, offer_id, selling, buying, amount, price, flags, ext), rest}
  end
end
