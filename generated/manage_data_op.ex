defmodule StellarBase.XDR.ManageDataOp do
  @moduledoc """
  Automatically generated by xdrgen
  DO NOT EDIT or your changes may be overwritten

  Target implementation: elixir_xdr at https://hex.pm/packages/elixir_xdr

  Representation of Stellar `ManageDataOp` type.
  """

  @behaviour XDR.Declaration

  alias StellarBase.XDR.{
    String64,
    OptionalDataValue
  }

  @struct_spec XDR.Struct.new(
    data_name: String64,
    data_value: OptionalDataValue
  )

  @type data_name_type :: String64.t()
  @type data_value_type :: OptionalDataValue.t()

  @type t :: %__MODULE__{data_name: data_name_type(), data_value: data_value_type()}

  defstruct [:data_name, :data_value]

  @spec new(data_name :: data_name_type(), data_value :: data_value_type()) :: t()
  def new(
    %String64{} = data_name,
    %OptionalDataValue{} = data_value
  ),
  do: %__MODULE__{data_name: data_name, data_value: data_value}

  @impl true
  def encode_xdr(%__MODULE__{data_name: data_name, data_value: data_value}) do
    [data_name: data_name, data_value: data_value]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr()
  end

  @impl true
  def encode_xdr!(%__MODULE__{data_name: data_name, data_value: data_value}) do
    [data_name: data_name, data_value: data_value]
    |> XDR.Struct.new()
    |> XDR.Struct.encode_xdr!()
  end

  @impl true
  def decode_xdr(bytes, struct \\ @struct_spec)

  def decode_xdr(bytes, struct) do
    case XDR.Struct.decode_xdr(bytes, struct) do
      {:ok, {%XDR.Struct{components: [data_name: data_name, data_value: data_value]}, rest}} ->
        {:ok, {new(data_name, data_value), rest}}
      error -> error
    end
  end

  @impl true
  def decode_xdr!(bytes, struct \\ @struct_spec)

  def decode_xdr!(bytes, struct) do
    {%XDR.Struct{components: [data_name: data_name, data_value: data_value]}, rest} =
      XDR.Struct.decode_xdr!(bytes, struct)
    {new(data_name, data_value), rest}
  end
end
